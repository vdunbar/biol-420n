scale_fill_brewer(palette = "Set1") +
scale_x_date(date_breaks = "month", date_labels = "%b", expand = c(0,0)) +
theme(
axis.text.x = element_text(angle = 45, colour = cond_date),
#axis.text.y = element_blank(),
legend.position = "none"
)
nightingale_col_sqrt_nl <- nightingale_col_sqrt +
theme(
legend.position = "none",
axis.text.y = element_text()
)
nightingale_col_sqrt_nl / nightingale_area_sqrt
le_gdp <- read.csv("data/lifeExpectencyVSgpd.csv", header = TRUE, na.strings = c("", " ", "NULL"))
colnames(le_gdp) <- c("country", "code", "year", "population", "continent", "life_expectancy", "gdp")
le_gdp_2015 <- subset(le_gdp, year == 2015 & gdp != "NA" & life_expectancy != "NA" & code != "NA" & continent != "NA")
le_gdp_plot <- ggplot(le_gdp_2015, aes(x = gdp, y = life_expectancy)) +
geom_point(alpha = 0.5, colour = "#142b50", size = 5) +
labs(x = "GDP", y = "Life Expectancy") +
scale_x_continuous(labels = scales::label_dollar(scale = 1/1000, suffix = "K", largest_with_cents = 0), breaks = c(1L, 50000L, 100000L))
le_gdp_log_plot <- le_gdp_plot +
labs(x = "log10 GDP", y = "") +
scale_x_log10(labels = scales::label_dollar(scale = 1/1000, suffix = "K", largest_with_cents = 0), breaks = scales::log_breaks(n = 5, base = 10)) +
theme(
axis.text.y = element_blank()
)
le_gdp_plot + le_gdp_log_plot
library(dplyr)
library(mgcv)
library(ggplot2)
install.packages("gratia")
library(gratia)
theme_set(theme_minimal())
set.seed(123)
df <- tibble(x = runif(n = 300),
mu = 4 - 3 * x,
e = rnorm(n = length(x), mean = 0, sd = 1),
y = mu + e)
View(df)
m0 <- gam(y ~ x, data = df)
m0
summary(m0)
set.seed(0)
df <- tibble(x = runif(n = 300),
mu = 4 - 3 * x,
e = rnorm(n = length(x), mean = 0, sd = 1),
y = mu + e)
# 5 central assumptions
# * no measurement error in independent variable, x
# * linearity, relatinoship between x and the mean of y is linear
# * homoscedacity, variance in y are constant over x
# * independence, each observation is independent of the other
# * normality,
m0 <- gam(y ~ x, data = df)
summary(m0)
df_counts <- read.csv("~/Desktop/_tmp/biol_420n/poverty_counts.csv", strip.white = TRUE)
View(df_counts)
df_rates <- read.csv("~/Desktop/_tmp/biol_420n/poverty_rates.csv")
View(df_rates)
?where
View(subset(df_rates, region_name == "Other High Income Countries" & reporting_year == 1981))
View(subset(df_rates, region_name == "Wolrd" & reporting_year == 1981))
View(subset(df_rates, region_name == "World" & reporting_year == 1981))
View(subset(df_rates, country_name == "Canada" & reporting_year == 2022))
View(subset(df_rates, country_name == "Canada" & reporting_year == 2021))
range(df_rates$reporting_year)
View(subset(df_rates, country_name == "Canada" & reporting_year == 2019))
df_counts <- read.csv("~/Desktop/_tmp/biol_420n/poverty-explorer.csv", strip.white = TRUE)
View(df_counts)
colnames(df_counts)
df_counts_2018 <- subset(df_counts, Year == 2018)
View(df_counts_2018)
library(rnaturalearth)
library(rnaturalearthdata)
?rnaturalearth
ggplot(data = ne_countries()) +
geom_sf()
ggplot(data = ne_countries()) +
geom_sf() +
coord_flip()
?coord_sf
ggplot(data = ne_countries()) +
geom_sf() +
scale_y_reverse()
ggplot(data = ne_countries()) +
geom_sf() +
coord_polar()
install.packages("ggspatial")
library(ggspatial)
ggplot(data = ne_countries()) +
geom_spatial_polygon()
ggplot(data = ne_countries()) +
geom_spatial_polygon() +
coord_sf(crs = st_crs(3347))
library(sf)
ggplot(data = ne_countries()) +
geom_spatial_polygon() +
coord_sf(crs = st_crs(3347))
rot <- function(a) matrix(c(cos(a), sin(a), -sin(a), cos(a)), 2, 2)
my_data <- ne_countries()
my_data_rot <- my_data %>%
mutate(geom_rot = st_geometry(.)*rot(pi/2)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry")
ggplot(data = my_data_rot()) +
geom_sf()
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot <- my_data %>%
mutate(geom_rot = st_geometry(.)*rot(pi/4)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry")
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot <- my_data %>%
mutate(geom_rot = st_geometry(.)*rot(pi/3)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry")
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot <- my_data %>%
mutate(geom_rot = st_geometry(.)*rot(pi/1)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry")
ggplot(data = my_data_rot) +
geom_sf()
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf(crs = st_crs(3347))
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf(crs = st_transform(3347))
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf()
summary(my_data_rot$geometry)
View(my_data_rot$geometry)
summary(my_data$geometry)
?st_set_crs()
my_data_rot$geometry <- st_set_crs(4326)
my_data_rot$geometry %>% st_set_crs(4326)
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf()
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf(crs = st_crs(3347))
my_data_rot$geometry <- my_data_rot$geometry %>% st_set_crs(4326)
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf(crs = st_crs(3347))
ggplot(data = my_data_rot) +
geom_sf() +
coord_sf(crs = st_crs())
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot$geometry <- my_data_rot$geometry %>% st_set_crs(4326) %>% st_transform(3347)
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot$geometry <- my_data_rot$geometry %>% st_set_crs(4326)
ggplot(data = my_data_rot) +
geom_sf()
my_data_rot <- my_data %>%
mutate(geom_rot = st_geometry(.)*rot(pi/1)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry") %>%
st_set_crs(4326)
ggplot(data = my_data_rot) +
geom_sf()
?ne_countries
canada <- ne_countries(country = "Canada")
ggplot(data = canada) +
geom_sf()
ggplot(data = canada) +
geom_sf() +
coord_sf(crs = st_crs(3347))
ggplot(data = canada) +
geom_sf()
ggplot(data = canada) +
geom_sf() +
coord_sf(crs = st_crs(3347))
canada_rot <- canada %>%
mutate(geom_rot = st_geometry(.)*rot(pi/1)) %>%
st_drop_geometry() %>%
rename(geometry = geom_rot) %>%
st_set_geometry("geometry") %>%
st_set_crs(4326)
ggplot(data = canada) +
geom_sf() +
coord_sf(crs = st_crs(3347))
ggplot(data = canada_rot) +
geom_sf() +
coord_sf(crs = st_crs(3347))
ggplot(data = canada_rot) +
geom_sf()
library('dplyr')   # for data wrangling
library('mgcv')    # for modeling
library('ggplot2') # for fancy plots
library('gratia')  # for ggplot-based model graphics
library('faraway') # for datasets
theme_set(theme_classic(base_size = 15))
# diagnosing any issues with model assumption violations ----
plot_example_diagnostics <- function(seed = as.numeric(Sys.time())) {
set.seed(seed)
d0 <- tibble(x = runif(n = 20), # predictor of Y
mu = 4 - 3 * x, # true mean of Y
epsilon = rnorm(n = length(x), mean = 0, sd = 1), # Gaussian error
Y = mu + epsilon, # values of Y
mu_hat = predict(lm(Y ~ x)),
e = Y - mu_hat)
cowplot::plot_grid(
#' 1. *Certainty in x*: unlike Y, there is no error or uncertainty in x.
ggplot(d0) +
geom_errorbar(aes(x, ymin = Y - 1, ymax = Y + 1), color = 'grey') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~but~E(x)~'='~x)),
#' 2. *Linearity*: The relationship between X and the mean of Y is linear.
ggplot(d0) +
geom_line(aes(x, mu), col = 'red', lwd = 1) +
geom_smooth(aes(x, Y), lwd = 1, method = 'gam', formula = y ~ s(x),
color = 'darkorange') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 3. *Homoscedasticity*: The variance of the residuals is constant.
ggplot(d0) +
geom_hline(yintercept = 0, color = 'grey') +
geom_smooth(aes(x, e), col = 'darkorange', lwd = 1, method = 'gam',
formula = y ~ s(x), se = FALSE) +
geom_point(aes(x, e)) +
labs(x = 'x', y = 'Residuals (e)',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 4. *Independence*: Observations are independent of each other.
ggplot(d0) +
geom_point(aes(seq(nrow(d0)), Y)) +
labs(x = 'Observation order', y = 'Y',
title = expression(Y[italic(i)]~'\U2AEB'~Y[italic(j)]~
'for'~italic(i)~'\U2260'~italic(j))),
#' 5. *Normality*: For a given value of x, the error in Y is Gaussian.
ggplot(d0, aes(e)) +
# geom_density(color = 'black', fill = 'grey', bw = 0.25) +
geom_histogram(aes(y = after_stat(density)), color = 'black',
fill = 'grey', binwidth = 1) +
geom_line(aes(x, dens), color = 'red', lwd = 1,
tibble(x = seq(-3, 3, by = 0.001),
dens = dnorm(seq(-3, 3, by = 0.001)))) +
labs(x = expression('Residuals,'~e~'='~Y~-~hat(mu)),
y = 'Density',
title = expression(epsilon~'~'~N('0,'~sigma^2))),
ggplot(d0, aes(sample = e)) +
geom_qq_line(color = 'red') +
geom_qq(color = 'black') +
labs(x = 'Expected quantiles',
y = 'Obseved quantiles',
title = expression(epsilon~'~'~N('0,'~sigma^2))))
}
# diagnosing any issues with model assumption violations ----
plot_example_diagnostics <- function(seed = as.numeric(Sys.time())) {
set.seed(seed)
d0 <- tibble(x = runif(n = 20), # predictor of Y
mu = 4 - 3 * x, # true mean of Y
epsilon = rnorm(n = length(x), mean = 0, sd = 1), # Gaussian error
Y = mu + epsilon, # values of Y
mu_hat = predict(lm(Y ~ x)),
e = Y - mu_hat)
cowplot::plot_grid(
#' 1. *Certainty in x*: unlike Y, there is no error or uncertainty in x.
ggplot(d0) +
geom_errorbar(aes(x, ymin = Y - 1, ymax = Y + 1), color = 'grey') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~but~E(x)~'='~x)),
#' 2. *Linearity*: The relationship between X and the mean of Y is linear.
ggplot(d0) +
geom_line(aes(x, mu), col = 'red', lwd = 1) +
geom_smooth(aes(x, Y), lwd = 1, method = 'gam', formula = y ~ s(x),
color = 'darkorange') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 3. *Homoscedasticity*: The variance of the residuals is constant.
ggplot(d0) +
geom_hline(yintercept = 0, color = 'grey') +
geom_smooth(aes(x, e), col = 'darkorange', lwd = 1, method = 'gam',
formula = y ~ s(x), se = FALSE) +
geom_point(aes(x, e)) +
labs(x = 'x', y = 'Residuals (e)',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 4. *Independence*: Observations are independent of each other.
ggplot(d0) +
geom_point(aes(seq(nrow(d0)), Y)) +
labs(x = 'Observation order', y = 'Y',
title = expression(Y[italic(i)]~'\U2AEB'~Y[italic(j)]~
'for'~italic(i)~'\U2260'~italic(j))),
#' 5. *Normality*: For a given value of x, the error in Y is Gaussian.
ggplot(d0, aes(e)) +
# geom_density(color = 'black', fill = 'grey', bw = 0.25) +
geom_histogram(aes(y = after_stat(density)), color = 'black',
fill = 'grey', binwidth = 1) +
geom_line(aes(x, dens), color = 'red', lwd = 1,
tibble(x = seq(-3, 3, by = 0.001),
dens = dnorm(seq(-3, 3, by = 0.001)))) +
labs(x = expression('Residuals,'~e~'='~Y~-~hat(mu)),
y = 'Density',
title = expression(epsilon~'~'~N('0,'~sigma^2))),
ggplot(d0, aes(sample = e)) +
geom_qq_line(color = 'red') +
geom_qq(color = 'black') +
labs(x = 'Expected quantiles',
y = 'Obseved quantiles',
title = expression(epsilon~'~'~N('0,'~sigma^2))))
}
set.seed(seed)
d0 <- tibble(x = runif(n = 20), # predictor of Y
mu = 4 - 3 * x, # true mean of Y
epsilon = rnorm(n = length(x), mean = 0, sd = 1), # Gaussian error
Y = mu + epsilon, # values of Y
mu_hat = predict(lm(Y ~ x)),
e = Y - mu_hat)
cowplot::plot_grid(
#' 1. *Certainty in x*: unlike Y, there is no error or uncertainty in x.
ggplot(d0) +
geom_errorbar(aes(x, ymin = Y - 1, ymax = Y + 1), color = 'grey') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~but~E(x)~'='~x)),
#' 2. *Linearity*: The relationship between X and the mean of Y is linear.
ggplot(d0) +
geom_line(aes(x, mu), col = 'red', lwd = 1) +
geom_smooth(aes(x, Y), lwd = 1, method = 'gam', formula = y ~ s(x),
color = 'darkorange') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 3. *Homoscedasticity*: The variance of the residuals is constant.
ggplot(d0) +
geom_hline(yintercept = 0, color = 'grey') +
geom_smooth(aes(x, e), col = 'darkorange', lwd = 1, method = 'gam',
formula = y ~ s(x), se = FALSE) +
geom_point(aes(x, e)) +
labs(x = 'x', y = 'Residuals (e)',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 4. *Independence*: Observations are independent of each other.
ggplot(d0) +
geom_point(aes(seq(nrow(d0)), Y)) +
labs(x = 'Observation order', y = 'Y',
title = expression(Y[italic(i)]~'\U2AEB'~Y[italic(j)]~
'for'~italic(i)~'\U2260'~italic(j))),
#' 5. *Normality*: For a given value of x, the error in Y is Gaussian.
ggplot(d0, aes(e)) +
# geom_density(color = 'black', fill = 'grey', bw = 0.25) +
geom_histogram(aes(y = after_stat(density)), color = 'black',
fill = 'grey', binwidth = 1) +
geom_line(aes(x, dens), color = 'red', lwd = 1,
tibble(x = seq(-3, 3, by = 0.001),
dens = dnorm(seq(-3, 3, by = 0.001)))) +
labs(x = expression('Residuals,'~e~'='~Y~-~hat(mu)),
y = 'Density',
title = expression(epsilon~'~'~N('0,'~sigma^2))),
ggplot(d0, aes(sample = e)) +
geom_qq_line(color = 'red') +
geom_qq(color = 'black') +
labs(x = 'Expected quantiles',
y = 'Obseved quantiles',
title = expression(epsilon~'~'~N('0,'~sigma^2))))
plot_example_diagnostics() # run a few times for some examples
# diagnosing any issues with model assumption violations ----
plot_example_diagnostics <- function(seed = as.numeric(Sys.time())) {
set.seed(seed)
d0 <- tibble(x = runif(n = 20), # predictor of Y
mu = 4 - 3 * x, # true mean of Y
epsilon = rnorm(n = length(x), mean = 0, sd = 1), # Gaussian error
Y = mu + epsilon, # values of Y
mu_hat = predict(lm(Y ~ x)),
e = Y - mu_hat)
cowplot::plot_grid(
#' 1. *Certainty in x*: unlike Y, there is no error or uncertainty in x.
ggplot(d0) +
geom_errorbar(aes(x, ymin = Y - 1, ymax = Y + 1), color = 'grey') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~but~E(x)~'='~x)),
#' 2. *Linearity*: The relationship between X and the mean of Y is linear.
ggplot(d0) +
geom_line(aes(x, mu), col = 'red', lwd = 1) +
geom_smooth(aes(x, Y), lwd = 1, method = 'gam', formula = y ~ s(x),
color = 'darkorange') +
geom_point(aes(x, Y)) +
labs(x = 'x',  y = 'Y',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 3. *Homoscedasticity*: The variance of the residuals is constant.
ggplot(d0) +
geom_hline(yintercept = 0, color = 'grey') +
geom_smooth(aes(x, e), col = 'darkorange', lwd = 1, method = 'gam',
formula = y ~ s(x), se = FALSE) +
geom_point(aes(x, e)) +
labs(x = 'x', y = 'Residuals (e)',
title = expression(E(Y)~'='~mu~'='~beta[0]~+~beta[1]~x)),
#' 4. *Independence*: Observations are independent of each other.
ggplot(d0) +
geom_point(aes(seq(nrow(d0)), Y)) +
labs(x = 'Observation order', y = 'Y',
title = expression(Y[italic(i)]~'\U2AEB'~Y[italic(j)]~
'for'~italic(i)~'\U2260'~italic(j))),
#' 5. *Normality*: For a given value of x, the error in Y is Gaussian.
ggplot(d0, aes(e)) +
# geom_density(color = 'black', fill = 'grey', bw = 0.25) +
geom_histogram(aes(y = after_stat(density)), color = 'black',
fill = 'grey', binwidth = 1) +
geom_line(aes(x, dens), color = 'red', lwd = 1,
tibble(x = seq(-3, 3, by = 0.001),
dens = dnorm(seq(-3, 3, by = 0.001)))) +
labs(x = expression('Residuals,'~e~'='~Y~-~hat(mu)),
y = 'Density',
title = expression(epsilon~'~'~N('0,'~sigma^2))),
ggplot(d0, aes(sample = e)) +
geom_qq_line(color = 'red') +
geom_qq(color = 'black') +
labs(x = 'Expected quantiles',
y = 'Obseved quantiles',
title = expression(epsilon~'~'~N('0,'~sigma^2))))
}
plot_example_diagnostics() # run a few times for some examples
rm(d0)
plot_example_diagnostics() # run a few times for some examples
m_cw <- gam(formula = weight ~ Time, # Y ~ x
family = gaussian(), # because it's a linear model
data = ChickWeight,
method = 'ML') # find most likely coefficients given the data
# diagnosing model violations ----
# plot the data
ggplot(ChickWeight, aes(Time, weight)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ s(x)) +
labs(x = 'Time (days)', y = 'Weight (g)')
summary(m_cw)
# create diagnostic plots
appraise(m_cw, method = 'simulate', n_simulate = 1e4)
### log-transforming data does not fix things
min(ChickWeight$weight)
appraise(m_cw_log, method = 'simulate', n_simulate = 1e4)
m_cw_log <- gam(formula = log(weight) ~ Time, # Y ~ x
family = gaussian(), # because it's a linear model
data = ChickWeight,
method = 'ML') # find most likely coefficients given the data
appraise(m_cw_log, method = 'simulate', n_simulate = 1e4)
### a quick note Jensen's inequality
Y <- rpois(1e5, lambda = 3)
hist(Y, breaks = seq(0, max(Y)))
mean(Y) # calculating mean directly
abline(v = mean(Y), col = 'red', lwd = 2)
log(Y) %>% mean() %>% exp() # calculating mean after log transformation
log1p(Y) %>% mean() %>% exp() # calculating mean after log1p transformation
abline(v = exp(mean(log1p(Y))), col = 'darkorange', lwd = 2)
# prostate cancer data ----
?prostate
prostate$cavol <- exp(prostate$lcavol)
m_pc <- gam(formula = cavol ~ age, # Y ~ x
family = gaussian(),
data = prostate,
method = 'ML')
appraise(m_pc, method = 'simulate', n_simulate = 1e4)
ggplot(women, aes(height, weight)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ s(x)) +
labs(x = 'Height (in)', y = 'Weight (lb)')
m_wh <- gam(formula = weight ~ height,
family = gaussian(),
data = women,
method = 'ML')
appraise(m_wh, method = 'simulate', n_simulate = 1e4)
states <- as.data.frame(state.x77)
ggplot(states, aes(Income, Illiteracy)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ s(x)) +
labs(x = 'Per capita income (USD)', y = 'Illiteracy (%)')
m_ii <- gam(formula = Illiteracy ~ Income,
family = gaussian(),
data = states,
method = 'ML')
appraise(m_ii, method = 'simulate', n_simulate = 1e4)
appraise(m_ii, method = 'simulate', n_simulate = 1e4, n_bins = 5)
appraise(m_ii, method = 'simulate', n_simulate = 1e4)
appraise(m_ii, method = 'simulate', n_simulate = 1e4, n_bins = 5)
# drop the state with the highest income
ggplot(filter(states, Income < 6000), aes(Income, Illiteracy)) +
geom_point() +
geom_point(data = filter(states, Income > 6000), color = 'red') +
geom_smooth(method = 'gam', formula = y ~ s(x)) +
labs(x = 'Per capita income (USD)', y = 'Illiteracy (%)')
m_ii2 <- gam(formula = Illiteracy ~ Income,
family = gaussian(),
data = states,
subset = Income < 6000,
method = 'ML')
appraise(m_ii2, method = 'simulate', n_simulate = 1e4, n_bins = 5)
ggplot(filter(states, Income < 6000), aes(Income, Illiteracy)) +
geom_point() +
geom_point(data = filter(states, Income > 6000), color = 'red') +
geom_smooth(method = 'gam', formula = y ~ s(x)) +
geom_smooth(method = 'gam', formula = y ~ x, color = 'darkorange') +
labs(x = 'Per capita income (USD)', y = 'Illiteracy (%)')
# interpret linear model summaries ----
# coefficients, df, SE, t statistics, p-values, R^2, R^2_adj,
# statistical significance
summary(m_ii2)
