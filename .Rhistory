geom_line() +
geom_point() +
labs(x = "Year",
y = "Mean Temp (Â°C)") +
my_theme +
theme(legend.position = "none")
(august_plot_viridis <- august_plot +
scale_colour_viridis_c(option = "viridis"))
install.packages("BiocManager")
BiocManager::install("treeio")
BiocManager::install("ggtree")
install.packages("viridis")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
comment = NA)
library(dplyr) # tidy data
library(tidyr) # tidy data
library(ggplot2) # plotting
library(lubridate) # dates
library(patchwork) # arrange plots
library(DT) # data tables
install.packages("DT")
rivers_sorted <- sort(rivers, decreasing = F)
rivers_sorted_base <-
ggplot() +
geom_histogram(aes(rivers_sorted), bins = 36, fill = '#00428C', colour = '#00428C') +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 15)
) +
xlab("") +
ylab("")
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_bins <-  ggplot() +
geom_histogram(aes(rivers_sorted), bins = 5, fill = '#00428C', colour = '#00428C') +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 15)
) +
xlab("") +
ylab("")
rivers_sorted_bar + rivers_sorted_bins
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_bins <-  ggplot() +
geom_histogram(aes(rivers_sorted), bins = 5, fill = '#00428C', colour = '#00428C') +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 15)
) +
xlab("") +
ylab("")
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_bins + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
xlim(10,40)
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_bar + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
ylim(10,40)
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
ylim(1,40)
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
(rivers_sorted_scale <- rivers_sorted_bar +
ylim(1,40))
(rivers_sorted_scale <- rivers_sorted_bar)
rivers_sorted_bar
rivers_sorted_bar +
ylim(10, 30)
rivers_sorted_bar +
xlim(10, 1000)
rivers_sorted_bar +
ylim(10, 1000)
rivers_sorted_bar +
ylim(0,30)
rivers_sorted_bar +
ylim(1,30)
rivers_sorted_bar +
ylim(-1,30)
rivers_sorted_bar +
coord_cartesian(ylim = c(10,30))
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
coord_cartesian(ylim = c(10,30))
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
coord_cartesian(ylim = c(10,30))
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
+ scale_y_continuous(limits=c(10,30),oob = rescale_none)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
+ scale_y_continuous(limits=c(10,30))
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30))
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob = rescale_none())
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob = rescale_none)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob = rescale_none)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob_squish())
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob_squish)
library(scales)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob_squish())
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,30), oob = rescale_none)
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
rivers_sorted_bar <- rivers_sorted_base +
scale_y_continuous(minor_breaks = seq(1, 40, 1))
rivers_sorted_scale <- rivers_sorted_bar +
scale_y_continuous(limits=c(10,35), oob = rescale_none)
layout <- "
AA#BB
"
rivers_sorted_bar + rivers_sorted_scale + plot_layout(design = layout)
(colour_base <- ggplot(data = c, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
theme(legend.position = "none",
text = element_blank()))
c <- data.frame(a = 1:100,
b = 1)
(colour_base <- ggplot(data = c, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
theme(legend.position = "none",
text = element_blank()))
(viridis_plot <- colour_base +
scale_fill_viridis())
(viridis_plot <- colour_base +
scale_fill_viridis())
library(viridis)
(viridis_plot <- colour_base +
scale_fill_viridis())
(colour_base <- ggplot(data = c, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
scale_fill_viridis() +
theme(legend.position = "none",
text = element_blank()))
viridis_bar <- data.frame(a = 1:100,
b = 1)
(colour_base <- ggplot(data = c, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
scale_fill_viridis() +
theme(legend.position = "none",
text = element_blank()))
viridis_bar <- data.frame(a = 1:100,
b = 1)
(colour_base <- ggplot(data = c, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
scale_fill_viridis() +
theme(legend.position = "none",
text = element_blank()))
viridis_bar <- data.frame(a = 1:100,
b = 1)
(colour_base <- ggplot(data = viridis_bar, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
scale_fill_viridis() +
theme(legend.position = "none",
text = element_blank()))
data <- read.csv("~/Desktop/Exported Items.csv")
c <- table(data)
head(c)
c_df <- as.data.frame(c)
View(c_df)
write.csv(c_df, "~/Desktop/journals.csv")
?rivers
rivers
sessionInfo()
search()
file_ext
tools::file_ext()
tools::file_ext
setwd("~/Desktop/")
1 + 1
2 - 1
6 / 2
3 * 4
1+1
sqrt(16)
log10(100)
1:10
1:10 + 11:20
1:2 * 1:10
log(16)
log(4)
print("Hello world")
print("Hello World")
print("Hello World")
rivers
mean(rivers)
median(rivers)
var(rivers)
sd(rivers)
mean(rivers, trim = 0.1)
sample(rivers, 5)
rivers_mean <- mean(rivers)
rivers_mean
rivers_mean * 2
rivers_mean <- 2
rivers.mean <- mean(rivers)
riversMean <- mean(rivers)
random_sample <- c(1:100)
random_sample
random_sample <- sample(1:100, 10)
(random_sample <- sample(1:100, 10))
sample(random_sample, 10)
sample(rivers, 10, 1-100)
?mean
mean(data = rivers, na.rm = TRUE)
mean(x = rivers, na.rm = TRUE)
?scale_fill_viridis
library(viridis)
?scale_fill_viridis
library(patchwork)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
comment = NA)
library(dplyr) # tidy data
library(tidyr) # tidy data
library(ggplot2) # plotting
library(lubridate) # dates
library(patchwork) # arrange plots
library(DT) # data tables
library(HistData) # nightingale data
library(sf) # gis data
library(spData) # us polygons
library(treeio) # visualize phylogenetic trees
library(ggtree) # ggplot shortcut
library(scales) # for gdp
library(viridis) # colour maps
my_theme <- theme_minimal() +
theme(
panel.grid = element_blank()
)
theme_set(my_theme)
viridis_bar <- data.frame(a = 1:100,
b = 1)
colour_base <- ggplot(data = viridis_bar, aes(x = b, y = a, fill = a)) +
geom_col() +
coord_flip() +
labs(x = "", y = "") +
theme(legend.position = "none",
text = element_blank())
magma_plot <- colour_base +
scale_fill_viridis(option = "magma")
viridis_plot <- colour_base +
scale_fill_viridis(optino = "viridis")
magma_plot <- colour_base +
scale_fill_viridis(option = "magma")
viridis_plot <- colour_base +
scale_fill_viridis(option = "viridis")
turbo_plot <- colour_base +
scale_fill_viridis(option = "turbo")
magma_plot / viridis_plot / turbo_plot
magma_plot <- colour_base +
scale_fill_viridis(option = "magma", direction = 0)
magma_plot <- colour_base +
scale_fill_viridis(option = "magma", direction = -1)
magma_plot / viridis_plot / turbo_plot
magma_plot <- colour_base +
scale_fill_viridis(option = "magma", direction = -1)
viridis_plot <- colour_base +
scale_fill_viridis(option = "viridis", direction = -1)
turbo_plot <- colour_base +
scale_fill_viridis(option = "turbo", direction = -1)
magma_plot / viridis_plot / turbo_plot
mako_plot <- colour_base +
scale_fill_viridis(option = "mako", direction = -1)
magma_plot / viridis_plot / mako_plot / turbo_plot
# load the data
levgdp <- read.csv("data/lifeExpectencyVSgpd.csv", header = TRUE, na.strings = c("", " ", "NULL"))
# tidy up
colnames(levgdp) <- c("Country", "Code", "Year", "Population", "Continent", "Life.Expectency", "GDP")
# subset
levgdp_2015 <- subset(levgdp, Year == 2015 & GDP != "NA" & Life.Expectency != "NA" & Code != "NA" & Continent != "NA")
# make reproducible
set.seed(2)
data.gpd <- as_tibble(levgdp)
# print a random sample
head(levgdp_2015[sample(nrow(levgdp_2015), 20), ], 20)
# load the data
levgdp <- read.csv("data/lifeExpectencyVSgpd.csv", header = TRUE, na.strings = c("", " ", "NULL"))
# tidy up
colnames(levgdp) <- c("Country", "Code", "Year", "Population", "Continent", "Life.Expectency", "GDP")
View(levgdp)
View(levgdp_2015)
# load the data
levgdp <- read.csv("data/lifeExpectencyVSgpd.csv", header = TRUE, na.strings = c("", " ", "NULL"))
# tidy up
colnames(levgdp) <- c("Country", "Code", "Year", "Population", "Continent", "Life Expectency", "GDP")
# subset
levgdp_2015 <- subset(levgdp, Year == 2015 & GDP != "NA" & `Life Expectency` != "NA" & Code != "NA" & Continent != "NA")
# make reproducible
set.seed(2)
data.gpd <- as_tibble(levgdp)
# print a random sample
head(levgdp_2015[sample(nrow(levgdp_2015), 20), ], 20)
levgdp_2015_lm +
facet_wrap( ~ Continent) +
theme(legend.position = "none")
levgdp_2015_alpha / levgdp_2015_log +
plot_layout(guides = 'collect')
# load the data
levgdp <- read.csv("data/lifeExpectencyVSgpd.csv", header = TRUE, na.strings = c("", " ", "NULL"))
# tidy up
colnames(levgdp) <- c("Country", "Code", "Year", "Population", "Continent", "Life Expectency", "GDP")
# subset
levgdp_2015 <- subset(levgdp, Year == 2015 & GDP != "NA" & `Life Expectency` != "NA" & Code != "NA" & Continent != "NA")
# make reproducible
set.seed(2)
# print a random sample
head(levgdp_2015[sample(nrow(levgdp_2015), 20), ], 20)
levgdp_base <- ggplot (levgdp_2015) +
labs(x = "GDP", y = "Life Expectency", colour = "Continent") +
scale_color_viridis_d()
levgdp_base +
geom_point(aes(GDP, `Life Expectency`), size = 5) +
scale_x_continuous(limits = c(0, 150000), labels = scales::dollar_format(prefix = "$"))
levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent)), size = 5) +
scale_x_continuous(limits = c(0,150000), labels = dollar_format(prefix = "$")) +
guides(colour = guide_legend(override.aes = list(size=10)))
levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent), size = Population)) +
scale_x_continuous(limits = c(0, 150000), labels = dollar_format(prefix = "$")) +
scale_size(range = c(2,15), guide = "none") +
guides(colour = guide_legend(override.aes = list(size=10)))
(levgdp_2015_alpha <-  levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent), size = Population), alpha = 0.7) +
scale_x_continuous(limits = c(0, 150000), labels = dollar_format(prefix = "$")) +
scale_size(range = c(2,15), guide = "none") +
guides(colour = guide_legend(override.aes = list(size=10))))
(levgdp_2015_log <- levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent), size = Population), alpha = 0.7) +
scale_x_log10(
breaks = c(0L, 50000L, 100000L, 150000L),
labels = dollar_format(prefix = "$")) +
scale_size(range = c(2,15), guide = "none") +
scale_y_continuous(
breaks = c(50,60,70,80),
limits = c(50,85)) +
guides(colour = guide_legend(override.aes = list(size=10))))
levgdp_2015_alpha / levgdp_2015_log +
plot_layout(guides = 'collect')
levgpd_2015_alpha_lm <- levgdp_2015_alpha +
geom_smooth(aes(GDP, `Life Expectency`), method = "lm", se = F)
levgdp_2015_lm <- levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent), size = Population), alpha = 0.7) +
scale_x_log10(
breaks = c(0L, 50000L, 100000L, 150000L),
labels = dollar_format(prefix = "$")) +
scale_size(range = c(2,15), guide = "none") +
scale_y_continuous(
breaks = c(50,60,70,80),
limits = c(50,85)) +
guides(colour = guide_legend(override.aes = list(size=10))) +
geom_smooth(aes(GDP, `Life Expectency`), method = "lm", se = F)
levgdp_2015_alpha_lm / levgdp_2015_lm +
plot_layout(guides = 'collect')
levgdp_2015_alpha_lm <- levgdp_2015_alpha +
geom_smooth(aes(GDP, `Life Expectency`), method = "lm", se = F)
levgdp_2015_lm <- levgdp_base +
geom_point(aes(GDP, `Life Expectency`, colour = factor(Continent), size = Population), alpha = 0.7) +
scale_x_log10(
breaks = c(0L, 50000L, 100000L, 150000L),
labels = dollar_format(prefix = "$")) +
scale_size(range = c(2,15), guide = "none") +
scale_y_continuous(
breaks = c(50,60,70,80),
limits = c(50,85)) +
guides(colour = guide_legend(override.aes = list(size=10))) +
geom_smooth(aes(GDP, `Life Expectency`), method = "lm", se = F)
levgdp_2015_alpha_lm / levgdp_2015_lm +
plot_layout(guides = 'collect')
?is.atomic
c <- data.frame(a = c(1, 2, 3))
c <- data.frame(a = c(1, 2, 3)
b = letters[1:3])
c
letters[1]
letters[1:3]
c <- data.frame(a = c(1, 2, 3)
b = letters[1:3]
c <- data.frame(a = c(1, 2, 3),
b = letters[1:3]
)
c
is.atomic(c)
d <- data.frame(a = c(1,2,3),
b = c(4,5,6)
)
is.atomic(d)
e <- as.matrix(d)
is.atomic(e)
is.vector(e)
?is.vector
f <- list(a = c(1,2,3),
b = c(3,4,5),
c = c(6, 7,8))
f
is.atomic(f)
is.vector(f)
is.numeric(f)
is.integer(f)
is.integer(e)
?rnorm
getwd()
numbers <- 20220301
typeof(numbers)
numbers_as_date <- as.Date(as.character(numbers, "%Y%m%d"))
numbers_as_date <- as.Date(as.character(numbers), "%Y%m%d")
class(numbers_as_date)
Sys.Date()
Sys.Date() - numbers
Sys.Date() - numbers_as_date
rivers
is.vector(rivers)
typeof(rivers)
is.atomic(rivers)
is.double(rivers)
my_df <- data.frame(
numbers = c(1, 5, 8, 9, 11),
words = c("I", "want", "to", "learn", "R")
)
my_df
my_list <- list(
breakfast = c("eggs", "coffee"),
lunch = c("toast"),
dinner = c(1, 2, 3, 4)
)
my_list
my_matrix <- matrix(rnom(12, 10, 1), nrow = 3)
my_matrix <- matrix(rnorm(12, 10, 1), nrow = 3)
my_matrix
?dir.create()
dir.create("~/Desktop/r-for-beginners_2")
